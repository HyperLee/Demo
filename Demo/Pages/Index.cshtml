@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://learn.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>

<!-- 時鐘元件區塊 -->
<div class="flex flex-col items-center justify-center mt-10">
    <!-- 切換按鈕已移除，兩種時鐘同時顯示 -->
    <!-- 電子時鐘樣式 -->
    <div id="digitalClock" class="flex items-center justify-center text-5xl md:text-7xl font-mono bg-gray-900 text-green-400 rounded-lg px-8 py-4 shadow-lg select-none" style="letter-spacing:0.1em; margin-bottom:2rem;">
        <span id="digitalHour">00</span><span id="digitalColon1" class="mx-1">:</span><span id="digitalMinute">00</span><span id="digitalColon2" class="mx-1">:</span><span id="digitalSecond">00</span>
    </div>
    <!-- 指針時鐘樣式 -->
    <div id="analogClock" style="margin-top:2rem;">
        <div class="analog-clock-face">
            <!-- 刻度 -->
            <div id="clockTicks"></div>
            <!-- 指針 -->
            <div id="hourHand" class="analog-hour-hand"></div>
            <div id="minuteHand" class="analog-minute-hand"></div>
            <div id="secondHand" class="analog-second-hand"></div>
            <!-- 中心圓點 -->
            <div class="analog-center-dot"></div>
        </div>
    </div>
</div>

<style>
.analog-clock-face {
    position: relative;
    width: 16rem; /* 256px */
    height: 16rem;
    background: #fff;
    border-radius: 50%;
    box-shadow: 0 4px 24px 0 #0001;
    border: 4px solid #d1d5db;
    margin: 0 auto;
}
.analog-hour-hand {
    position: absolute;
    left: 50%;
    top: 50%;
    width: 8px;
    height: 56px;
    margin-left: -4px;
    margin-top: -56px;
    background: #374151;
    border-radius: 4px 4px 0 0;
    transform-origin: bottom;
    z-index: 5;
}
.analog-minute-hand {
    position: absolute;
    left: 50%;
    top: 50%;
    width: 5px;
    height: 80px;
    margin-left: -2.5px;
    margin-top: -80px;
    background: #2563eb;
    border-radius: 3px 3px 0 0;
    transform-origin: bottom;
    z-index: 6;
}
.analog-second-hand {
    position: absolute;
    left: 50%;
    top: 50%;
    width: 2px;
    height: 96px;
    margin-left: -1px;
    margin-top: -96px;
    background: #ef4444;
    border-radius: 2px 2px 0 0;
    transform-origin: bottom;
    z-index: 7;
}
.analog-center-dot {
    position: absolute;
    left: 50%;
    top: 50%;
    width: 16px;
    height: 16px;
    margin-left: -8px;
    margin-top: -8px;
    background: #374151;
    border-radius: 50%;
    z-index: 10;
}
</style>
<!-- 時鐘元件腳本 -->
<script>
// 取得 UTC+8 時間
function getTaipeiTime() {
    const now = new Date();
    // 取得 UTC 時間 (毫秒)
    const utc = now.getTime() + (now.getTimezoneOffset() * 60000);
    // 加上 8 小時 (28800000 毫秒)
    return new Date(utc + 8 * 60 * 60 * 1000);
}

// 電子時鐘更新
function updateDigitalClock() {
    const t = getTaipeiTime();
    document.getElementById('digitalHour').textContent = t.getHours().toString().padStart(2, '0');
    document.getElementById('digitalMinute').textContent = t.getMinutes().toString().padStart(2, '0');
    document.getElementById('digitalSecond').textContent = t.getSeconds().toString().padStart(2, '0');
    // 閃爍效果
    const showColon = t.getSeconds() % 2 === 0;
    document.getElementById('digitalColon1').style.opacity = showColon ? 1 : 0.3;
    document.getElementById('digitalColon2').style.opacity = showColon ? 1 : 0.3;
}

// 指針時鐘更新
function updateAnalogClock() {
    const t = getTaipeiTime();
    const hour = t.getHours() % 12;
    const minute = t.getMinutes();
    const second = t.getSeconds();
    // 角度計算
    const hourDeg = (hour + minute / 60) * 30;
    const minuteDeg = (minute + second / 60) * 6;
    const secondDeg = second * 6;
    // 防呆檢查
    const hourHand = document.getElementById('hourHand');
    const minuteHand = document.getElementById('minuteHand');
    const secondHand = document.getElementById('secondHand');
    if (hourHand && minuteHand && secondHand) {
        hourHand.style.transform = `rotate(${hourDeg}deg)`;
        minuteHand.style.transform = `rotate(${minuteDeg}deg)`;
        secondHand.style.transform = `rotate(${secondDeg}deg)`;
    } else {
        // 若元素不存在，顯示錯誤於 console
        console.error('指針元素不存在，analogClock 未正確渲染');
    }
}

// 指針時鐘刻度產生
function renderClockTicks() {
    const ticks = [];
    for (let i = 0; i < 60; i++) {
        const isHour = i % 5 === 0;
        const length = isHour ? 16 : 8;
        const color = isHour ? '#1e293b' : '#94a3b8';
        const width = isHour ? 3 : 1.5;
        const deg = i * 6;
        ticks.push(`<div style="position:absolute;left:50%;top:50%;width:${width}px;height:${length}px;background:${color};transform:rotate(${deg}deg) translate(-50%,-100%);border-radius:2px;"></div>`);
    }
    document.getElementById('clockTicks').innerHTML = ticks.join('');
}

// 初始化：兩種時鐘同時顯示
document.addEventListener('DOMContentLoaded', function() {
    renderClockTicks();
    updateDigitalClock();
    updateAnalogClock();
    setInterval(() => {
        updateDigitalClock();
        updateAnalogClock();
    }, 1000);
});
</script>
