@page
@model Demo.Pages.index8
@{
    ViewData["Title"] = Model.PageTitle;
}

@section Styles {
    <link rel="stylesheet" href="~/css/voice-styles.css" asp-append-version="true" />
    <style>
        .card {
            border: none;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        }
        
        .card-header {
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .form-label {
            font-weight: 600;
            color: #495057;
        }
        
        .btn-check:checked + .btn-outline-success,
        .btn-check:checked + .btn-outline-danger {
            color: white;
        }
        
        .amount-input-group {
            position: relative;
        }
        
        .amount-input-group::after {
            content: "元";
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: #6c757d;
            font-weight: 500;
            z-index: 4;
            pointer-events: none;
        }
        
        .form-control:focus {
            border-color: #80bdff;
            outline: 0;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }
        
        .btn-outline-success:hover,
        .btn-outline-danger:hover {
            color: white;
        }
        
        .is-invalid {
            border-color: #dc3545;
        }
        
        .text-danger {
            color: #dc3545 !important;
        }
        
        .btn:disabled {
            opacity: 0.65;
        }
        
        @@media (max-width: 768px) {
            .container {
                padding-left: 10px;
                padding-right: 10px;
                max-width: 100%;
                overflow-x: hidden;
            }
            
            .form-label {
                font-size: 0.9rem;
            }
            
            .btn-lg {
                font-size: 1rem;
                padding: 0.75rem 1.5rem;
            }
        }
        
        @@media (max-width: 576px) {
            .container {
                padding-left: 15px;
                padding-right: 15px;
                overflow: visible;
            }
            
            .card-body {
                padding: 1rem;
                overflow: visible;
            }
            
            .btn-lg {
                font-size: 1rem;
                padding: 0.5rem 1rem;
            }
            
            /* 手機版本的下拉選單調整 */
            .form-select {
                font-size: 16px; /* 防止手機瀏覽器自動縮放 */
            }
        }
    </style>
}

<div class="container">
    <!-- 語音輸入區域 -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="voice-input-area" id="voiceInputArea">
                <div class="voice-status voice-status-idle" id="voiceStatus">
                    <div id="voiceIcon">
                        <i class="fas fa-microphone voice-icon"></i>
                    </div>
                    <p id="statusText" class="mb-3">點擊開始語音輸入</p>
                    
                    <div class="voice-controls mb-3">
                        <button type="button" id="startVoiceBtn" class="btn voice-btn voice-btn-primary me-2">
                            <i class="fas fa-microphone me-1"></i>開始錄音
                        </button>
                        <button type="button" id="stopVoiceBtn" class="btn voice-btn voice-btn-danger d-none">
                            <i class="fas fa-stop me-1"></i>停止錄音
                        </button>
                    </div>
                    
                    <!-- 語音提示 -->
                    <div class="voice-hint">
                        <div class="hint-title">語音輸入範例：</div>
                        <div class="hint-examples">
                            <small>
                                • "我花了 100 元買咖啡"<br>
                                • "收入 3000 元薪水"<br>
                                • "今天午餐花了 120 元"
                            </small>
                        </div>
                    </div>
                </div>
                
                <!-- 語音識別結果顯示 -->
                <div id="speechResult" class="alert alert-info mt-3 d-none">
                    <h6><i class="fas fa-volume-up me-2"></i>語音識別結果：</h6>
                    <p id="speechText" class="mb-0 speech-text"></p>
                </div>
                
                <!-- 語音解析結果預覽 (Phase 1 增強版) -->
                <div id="parsedPreview" class="mt-3 d-none">
                    <div class="card border-primary">
                        <div class="card-header bg-light">
                            <div class="d-flex justify-content-between align-items-center">
                                <h6 class="mb-0"><i class="fas fa-brain me-2"></i>語音解析結果</h6>
                                <div class="d-flex align-items-center">
                                    <span class="me-2">整體信心度:</span>
                                    <div class="progress" style="width: 100px; height: 20px;">
                                        <div id="overallConfidenceBar" class="progress-bar" role="progressbar" 
                                             style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                                            <span id="overallConfidenceText">0%</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <!-- 日期 -->
                                <div class="col-md-6 mb-3">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <strong>日期:</strong>
                                        <div class="text-end">
                                            <span id="previewDateValue" class="me-2">-</span>
                                            <span id="previewDateConfidence" class="badge bg-secondary">-</span>
                                            <span id="previewDateStatus" class="badge bg-secondary">未解析</span>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- 收支類型 -->
                                <div class="col-md-6 mb-3">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <strong>類型:</strong>
                                        <div class="text-end">
                                            <span id="previewTypeValue" class="me-2">-</span>
                                            <span id="previewTypeConfidence" class="badge bg-secondary">-</span>
                                            <span id="previewTypeStatus" class="badge bg-secondary">未解析</span>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- 金額 -->
                                <div class="col-md-6 mb-3">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <strong>金額:</strong>
                                        <div class="text-end">
                                            <span id="previewAmountValue" class="me-2">-</span>
                                            <span id="previewAmountConfidence" class="badge bg-secondary">-</span>
                                            <span id="previewAmountStatus" class="badge bg-secondary">未解析</span>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- 付款方式 -->
                                <div class="col-md-6 mb-3">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <strong>付款方式:</strong>
                                        <div class="text-end">
                                            <span id="previewPaymentMethodValue" class="me-2">-</span>
                                            <span id="previewPaymentMethodConfidence" class="badge bg-secondary">-</span>
                                            <span id="previewPaymentMethodStatus" class="badge bg-secondary">未解析</span>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- 大分類 -->
                                <div class="col-md-6 mb-3">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <strong>大分類:</strong>
                                        <div class="text-end">
                                            <span id="previewCategoryValue" class="me-2">-</span>
                                            <span id="previewCategoryConfidence" class="badge bg-secondary">-</span>
                                            <span id="previewCategoryStatus" class="badge bg-secondary">未解析</span>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- 細分類 -->
                                <div class="col-md-6 mb-3">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <strong>細分類:</strong>
                                        <div class="text-end">
                                            <span id="previewSubCategoryValue" class="me-2">-</span>
                                            <span id="previewSubCategoryConfidence" class="badge bg-secondary">-</span>
                                            <span id="previewSubCategoryStatus" class="badge bg-secondary">未解析</span>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- 描述 -->
                                <div class="col-md-6 mb-3">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <strong>描述:</strong>
                                        <div class="text-end">
                                            <span id="previewDescriptionValue" class="me-2">-</span>
                                            <span id="previewDescriptionConfidence" class="badge bg-secondary">-</span>
                                            <span id="previewDescriptionStatus" class="badge bg-secondary">未解析</span>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- 商家 -->
                                <div class="col-md-6 mb-3">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <strong>商家:</strong>
                                        <div class="text-end">
                                            <span id="previewMerchantValue" class="me-2">-</span>
                                            <span id="previewMerchantConfidence" class="badge bg-secondary">-</span>
                                            <span id="previewMerchantStatus" class="badge bg-secondary">未解析</span>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- 備註 -->
                                <div class="col-12 mb-3">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <strong>備註:</strong>
                                        <div class="text-end">
                                            <span id="previewNoteValue" class="me-2">-</span>
                                            <span id="previewNoteConfidence" class="badge bg-secondary">-</span>
                                            <span id="previewNoteStatus" class="badge bg-secondary">未解析</span>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- 未解析內容 -->
                                <div id="unparsedContentSection" class="col-12 mb-3 d-none">
                                    <div class="alert alert-warning mb-0">
                                        <strong><i class="fas fa-exclamation-triangle me-2"></i>未解析內容:</strong>
                                        <span id="unparsedContentText"></span>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- 操作按鈕 -->
                            <div class="d-flex justify-content-end gap-2 mt-3">
                                <button type="button" class="btn btn-outline-secondary" id="rejectParseResult">
                                    <i class="fas fa-times me-1"></i>忽略結果
                                </button>
                                <button type="button" class="btn btn-primary" id="applyParseResult">
                                    <i class="fas fa-check me-1"></i>套用到表單
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Phase 2: 語音解析狀態指示器 -->
                <div id="voiceParseProgress" class="mt-3 d-none">
                    <div class="card border-info">
                        <div class="card-header bg-info text-white">
                            <div class="d-flex justify-content-between align-items-center">
                                <h6 class="mb-0">
                                    <i class="fas fa-cog fa-spin me-2"></i>語音解析進度
                                </h6>
                                <span class="badge bg-light text-dark" id="parseStateText">解析中</span>
                            </div>
                        </div>
                        <div class="card-body">
                            <!-- 整體進度 -->
                            <div class="mb-3">
                                <div class="d-flex justify-content-between align-items-center mb-1">
                                    <small class="text-muted">整體信心度</small>
                                    <small class="text-muted" id="overallProgressText">0%</small>
                                </div>
                                <div class="progress">
                                    <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" 
                                         id="overallProgressBar" style="width: 0%" 
                                         aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                                    </div>
                                </div>
                            </div>
                            
                            <!-- 欄位解析狀態 -->
                            <div id="fieldParseStatus" class="row g-2">
                                <!-- 動態生成的欄位狀態 -->
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Phase 2: 缺失欄位提示區域 -->
                <div id="missingFieldsAlert" class="mt-3 d-none">
                    <div class="alert alert-warning">
                        <div class="d-flex align-items-start">
                            <div class="flex-shrink-0">
                                <i class="fas fa-exclamation-triangle fa-lg text-warning"></i>
                            </div>
                            <div class="flex-grow-1 ms-3">
                                <h6 class="alert-heading mb-2">需要補充資訊</h6>
                                <p class="mb-3" id="nextStepSuggestion">請補充以下缺失的欄位：</p>
                                <div id="missingFieldsList" class="mb-3">
                                    <!-- 動態生成的缺失欄位列表 -->
                                </div>
                                <div class="d-flex gap-2 flex-wrap">
                                    <button type="button" class="btn btn-sm btn-outline-warning" id="quickFillBtn">
                                        <i class="fas fa-magic me-1"></i>智能填補
                                    </button>
                                    <button type="button" class="btn btn-sm btn-outline-success" id="continueWithPartialBtn">
                                        <i class="fas fa-arrow-right me-1"></i>繼續使用部分結果
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Phase 2: 信心度詳細檢視 -->
                <div id="confidenceDetails" class="mt-3 d-none">
                    <div class="card border-secondary">
                        <div class="card-header">
                            <h6 class="mb-0">
                                <i class="fas fa-chart-line me-2"></i>信心度詳細分析
                                <button type="button" class="btn btn-sm btn-outline-secondary float-end" onclick="toggleConfidenceDetails()">
                                    <i class="fas fa-eye"></i>
                                </button>
                            </h6>
                        </div>
                        <div class="card-body">
                            <div id="confidenceDetailsList" class="row g-3">
                                <!-- 動態生成的詳細信心度分析 -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- 頁面標題 -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <h1 class="h2 mb-0">
                    <i class="fas fa-@(Model.IsEditMode ? "edit" : "plus") text-primary"></i>
                    @Model.PageTitle
                </h1>
                <a asp-page="index7" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left"></i> 返回列表
                </a>
            </div>
            @if (Model.IsEditMode)
            {
                <p class="text-muted mt-2">記錄 ID: @Model.Record.Id</p>
            }
        </div>
    </div>

    <!-- 表單區域 -->
    <div class="row justify-content-center">
        <div class="col-lg-8 col-xl-6">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-file-alt"></i> 
                        記錄詳細資訊
                    </h5>
                </div>
                <div class="card-body">
                    <form method="post" id="recordForm" novalidate>
                        <input type="hidden" asp-for="Record.Id" />
                        
                        <!-- 基本資訊區塊 -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <h6 class="border-bottom pb-2 mb-3">
                                    <i class="fas fa-info-circle text-info"></i> 基本資訊
                                </h6>
                            </div>
                            
                            <!-- 日期欄位 -->
                            <div class="col-md-6 mb-3">
                                <label asp-for="Record.Date" class="form-label">
                                    <i class="fas fa-calendar"></i> 日期 <span class="text-danger">*</span>
                                </label>
                                <input asp-for="Record.Date" type="date" class="form-control" 
                                       max="@DateTime.Today.ToString("yyyy-MM-dd")" required />
                                <span asp-validation-for="Record.Date" class="text-danger"></span>
                            </div>
                            
                            <!-- 收支類型 -->
                            <div class="col-md-6 mb-3">
                                <label class="form-label">
                                    <i class="fas fa-exchange-alt"></i> 收支類型 <span class="text-danger">*</span>
                                </label>
                                <div class="btn-group w-100" role="group" aria-label="收支類型">
                                    <input type="radio" asp-for="Record.Type" value="Expense" id="typeExpense" class="btn-check" checked />
                                    <label class="btn btn-outline-danger" for="typeExpense">
                                        <i class="fas fa-minus-circle"></i> 支出
                                    </label>
                                    
                                    <input type="radio" asp-for="Record.Type" value="Income" id="typeIncome" class="btn-check" />
                                    <label class="btn btn-outline-success" for="typeIncome">
                                        <i class="fas fa-plus-circle"></i> 收入
                                    </label>
                                </div>
                                <span asp-validation-for="Record.Type" class="text-danger"></span>
                            </div>
                        </div>

                        <!-- 金額與付款方式區塊 -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <h6 class="border-bottom pb-2 mb-3">
                                    <i class="fas fa-dollar-sign text-success"></i> 金額資訊
                                </h6>
                            </div>
                            
                            <!-- 金額欄位 -->
                            <div class="col-md-6 mb-3">
                                <label asp-for="Record.Amount" class="form-label">
                                    <i class="fas fa-coins"></i> 金額 <span class="text-danger">*</span>
                                </label>
                                <div class="input-group">
                                    <span class="input-group-text">NT$</span>
                                    <input asp-for="Record.Amount" type="number" class="form-control money-input" 
                                           placeholder="0" min="0" max="999999999" step="1" required />
                                </div>
                                <span asp-validation-for="Record.Amount" class="text-danger"></span>
                                <div class="form-text">僅允許輸入整數，最大 999,999,999</div>
                            </div>
                            
                            <!-- 付款方式 -->
                            <div class="col-md-6 mb-3">
                                <label asp-for="Record.PaymentMethod" class="form-label">
                                    <i class="fas fa-credit-card"></i> 付款方式
                                </label>
                                <select asp-for="Record.PaymentMethod" 
                                        asp-items="Model.PaymentMethodOptions" 
                                        class="form-select">
                                    <option value="">請選擇付款方式</option>
                                </select>
                                <span asp-validation-for="Record.PaymentMethod" class="text-danger"></span>
                            </div>
                        </div>

                        <!-- 智能分類推薦區域 -->
                        <div class="smart-category-section mb-3" id="smartCategorySection" style="display: none;">
                            <label class="form-label">
                                <i class="fas fa-magic text-primary"></i> 智能分類建議
                            </label>
                            <div id="categorySuggestions" class="category-suggestions">
                                <!-- 動態載入分類建議 -->
                            </div>
                            <div class="mt-2">
                                <small class="text-muted">
                                    <i class="fas fa-lightbulb"></i> 
                                    點選建議的分類或手動選擇分類
                                </small>
                            </div>
                        </div>

                        <!-- 分類區塊 -->
                        <div class="row mb-5">
                            <div class="col-12">
                                <h6 class="border-bottom pb-2 mb-3">
                                    <i class="fas fa-tags text-warning"></i> 分類資訊
                                </h6>
                            </div>
                            
                            <!-- 大分類 -->
                            <div class="col-md-6 mb-4">
                                <label asp-for="Record.Category" class="form-label">
                                    <i class="fas fa-folder"></i> 大分類 <span class="text-danger">*</span>
                                </label>
                                <div class="d-flex gap-2">
                                    <select asp-for="Record.Category" id="categorySelect" class="form-select" required>
                                        <option value="">請選擇大分類</option>
                                    </select>
                                    <button type="button" class="btn btn-outline-primary btn-sm flex-shrink-0" 
                                            onclick="showAddCategoryModal()" title="新增大分類">
                                        <i class="fas fa-plus"></i>
                                    </button>
                                    <button type="button" class="btn btn-outline-secondary btn-sm flex-shrink-0" id="smartCategoryBtn" 
                                            data-bs-toggle="tooltip" title="智能分類建議">
                                        <i class="fas fa-magic"></i>
                                    </button>
                                </div>
                                <span asp-validation-for="Record.Category" class="text-danger"></span>
                                <div class="smart-category-feedback mt-2" id="categoryFeedback" style="display: none;">
                                    <div class="d-flex align-items-center">
                                        <small class="text-muted me-2">分類是否正確？</small>
                                        <button type="button" class="btn btn-sm btn-success me-1" id="feedbackCorrect">
                                            <i class="fas fa-thumbs-up"></i>
                                        </button>
                                        <button type="button" class="btn btn-sm btn-danger" id="feedbackIncorrect">
                                            <i class="fas fa-thumbs-down"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- 細分類 -->
                            <div class="col-md-6 mb-4">
                                <label asp-for="Record.SubCategory" class="form-label">
                                    <i class="fas fa-tag"></i> 細分類
                                </label>
                                <div class="d-flex gap-2">
                                    <select asp-for="Record.SubCategory" id="subCategorySelect" class="form-select">
                                        <option value="">請選擇細分類</option>
                                    </select>
                                    <button type="button" class="btn btn-outline-primary btn-sm flex-shrink-0" 
                                            onclick="showAddSubCategoryModal()" title="新增細分類" id="addSubCategoryBtn" disabled>
                                        <i class="fas fa-plus"></i>
                                    </button>
                                </div>
                                <span asp-validation-for="Record.SubCategory" class="text-danger"></span>
                                <div class="form-text">請先選擇大分類</div>
                            </div>
                        </div>

                        <!-- 交易描述區塊 -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <h6 class="border-bottom pb-2 mb-3">
                                    <i class="fas fa-file-text text-primary"></i> 交易資訊
                                </h6>
                            </div>
                            
                            <!-- 交易描述 -->
                            <div class="col-md-8 mb-3">
                                <label for="description" class="form-label">
                                    <i class="fas fa-edit"></i> 交易描述 <span class="text-danger">*</span>
                                </label>
                                <input type="text" id="description" name="description" class="form-control" 
                                       placeholder="例如: 早餐、午餐、加油、購物等" required />
                                <div class="form-text">
                                    詳細描述有助於智能分類更加準確
                                </div>
                            </div>
                            
                            <!-- 商家名稱 -->
                            <div class="col-md-4 mb-3">
                                <label for="merchant" class="form-label">
                                    <i class="fas fa-store"></i> 商家名稱
                                </label>
                                <input type="text" id="merchant" name="merchant" class="form-control" 
                                       placeholder="例如: 7-11、麥當勞" />
                                <div class="form-text">
                                    選填，有助於智能分類
                                </div>
                            </div>
                        </div>

                        <!-- 自動學習提示 -->
                        <div class="alert alert-info" id="learningAlert" style="display: none;">
                            <i class="fas fa-graduation-cap"></i>
                            <strong>學習中...</strong> 系統正在從您的操作中學習，下次會提供更準確的建議！
                        </div>

                        <!-- 備註區塊 -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <h6 class="border-bottom pb-2 mb-3">
                                    <i class="fas fa-sticky-note text-info"></i> 其他資訊
                                </h6>
                            </div>
                            
                            <div class="col-12 mb-3">
                                <label asp-for="Record.Note" class="form-label">
                                    <i class="fas fa-comment"></i> 備註
                                </label>
                                <textarea asp-for="Record.Note" class="form-control" rows="4" 
                                          placeholder="輸入備註資訊（選填）" maxlength="500"></textarea>
                                <span asp-validation-for="Record.Note" class="text-danger"></span>
                                <div class="form-text">
                                    <span id="noteCount">0</span> / 500 字元
                                </div>
                            </div>
                        </div>

                        <!-- 操作按鈕 -->
                        <div class="row">
                            <div class="col-12">
                                <div class="d-flex justify-content-between">
                                    <a asp-page="index7" class="btn btn-outline-secondary btn-lg">
                                        <i class="fas fa-times"></i> 取消
                                    </a>
                                    
                                    <div>
                                        @if (Model.IsEditMode)
                                        {
                                            <button type="button" class="btn btn-outline-danger me-2" onclick="confirmDelete()">
                                                <i class="fas fa-trash"></i> 刪除
                                            </button>
                                        }
                                        <button type="submit" class="btn btn-success btn-lg">
                                            <i class="fas fa-save"></i> 
                                            @(Model.IsEditMode ? "更新記錄" : "新增記錄")
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 刪除確認對話框 -->
@if (Model.IsEditMode)
{
    <div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteConfirmModalLabel">確認刪除記錄</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="text-center mb-3">
                        <i class="fas fa-exclamation-triangle fa-3x text-warning"></i>
                    </div>
                    <p class="text-center">您確定要刪除這筆記錄嗎？</p>
                    <div class="alert alert-info">
                        <strong>日期：</strong>@Model.Record.Date.ToString("yyyy-MM-dd")<br>
                        <strong>類型：</strong>@(Model.Record.Type == "Income" ? "收入" : "支出")<br>
                        <strong>分類：</strong>@Model.Record.Category<br>
                        <strong>金額：</strong>NT$ @Model.Record.Amount.ToString("N0")
                    </div>
                    <p class="text-danger text-center"><small><i class="fas fa-exclamation-triangle"></i> 此操作無法復原！</small></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times"></i> 取消
                    </button>
                    <form method="post" asp-page="index7" asp-page-handler="Delete" style="display: inline;">
                        <input type="hidden" name="id" value="@Model.Record.Id" />
                        <input type="hidden" name="year" value="@Model.Record.Date.Year" />
                        <input type="hidden" name="month" value="@Model.Record.Date.Month" />
                        <button type="submit" class="btn btn-danger">
                            <i class="fas fa-trash"></i> 確認刪除
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
}

<!-- 新增大分類對話框 -->
<div class="modal fade" id="addCategoryModal" tabindex="-1" aria-labelledby="addCategoryModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addCategoryModalLabel">
                    <i class="fas fa-folder-plus text-primary"></i> 新增大分類
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addCategoryForm">
                    <div class="mb-3">
                        <label for="newCategoryName" class="form-label">
                            <i class="fas fa-folder"></i> 分類名稱 <span class="text-danger">*</span>
                        </label>
                        <input type="text" class="form-control" id="newCategoryName" 
                               placeholder="輸入分類名稱" maxlength="50" required>
                        <div class="form-text">最多 50 個字元</div>
                    </div>
                    <div class="mb-3">
                        <label for="newCategoryIcon" class="form-label">
                            <i class="fas fa-icons"></i> 圖示 (選填)
                        </label>
                        <select class="form-select" id="newCategoryIcon">
                            <option value="fas fa-folder">📁 預設資料夾</option>
                            <option value="fas fa-utensils">🍴 餐飲食品</option>
                            <option value="fas fa-tshirt">👕 服飾美容</option>
                            <option value="fas fa-home">🏠 居家生活</option>
                            <option value="fas fa-car">🚗 運輸交通</option>
                            <option value="fas fa-heartbeat">❤️ 醫療保健</option>
                            <option value="fas fa-gamepad">🎮 娛樂休閒</option>
                            <option value="fas fa-graduation-cap">🎓 教育學習</option>
                            <option value="fas fa-briefcase">💼 工作收入</option>
                            <option value="fas fa-gift">🎁 禮品捐贈</option>
                        </select>
                    </div>
                    <div class="alert alert-info d-none" id="addCategoryMessage"></div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times"></i> 取消
                </button>
                <button type="button" class="btn btn-primary" onclick="createCategory()">
                    <i class="fas fa-save"></i> 建立分類
                </button>
            </div>
        </div>
    </div>
</div>

<!-- 新增子分類對話框 -->
<div class="modal fade" id="addSubCategoryModal" tabindex="-1" aria-labelledby="addSubCategoryModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addSubCategoryModalLabel">
                    <i class="fas fa-tag text-primary"></i> 新增細分類
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addSubCategoryForm">
                    <div class="mb-3">
                        <label class="form-label">
                            <i class="fas fa-folder"></i> 所屬大分類
                        </label>
                        <input type="text" class="form-control" id="selectedCategoryName" readonly>
                    </div>
                    <div class="mb-3">
                        <label for="newSubCategoryName" class="form-label">
                            <i class="fas fa-tag"></i> 子分類名稱 <span class="text-danger">*</span>
                        </label>
                        <input type="text" class="form-control" id="newSubCategoryName" 
                               placeholder="輸入子分類名稱" maxlength="50" required>
                        <div class="form-text">最多 50 個字元</div>
                    </div>
                    <div class="alert alert-info d-none" id="addSubCategoryMessage"></div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times"></i> 取消
                </button>
                <button type="button" class="btn btn-primary" onclick="createSubCategory()">
                    <i class="fas fa-save"></i> 建立子分類
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/voice-input.js" asp-append-version="true"></script>
    <script>
        // 語音輸入實例
        let voiceInput = null;

        document.addEventListener('DOMContentLoaded', function() {
            // 初始化語音輸入
            voiceInput = new VoiceInput({
                context: 'personal',
                container: '#voiceInputArea',
                targetForm: '#recordForm',
                onResult: function(result) {
                    console.log('語音解析結果:', result);
                    displayParseResult(result);
                },
                onError: function(error) {
                    console.error('語音輸入錯誤:', error);
                }
            });

            // 初始化
            updateCategoryOptions();
            updateAmountDisplay();
            updateNoteCount();
            
            // 如果是編輯模式且有選擇的大分類，載入子分類
            const categorySelect = document.getElementById('categorySelect');
            if (categorySelect.value && '@Model.Record.Category' !== '') {
                loadSubCategories('@Model.Record.Category', '@Model.Record.Type');
            }

            // 收支類型變更事件
            document.querySelectorAll('input[name="Record.Type"]').forEach(radio => {
                radio.addEventListener('change', function() {
                    updateCategoryOptions();
                    // 清空分類選擇
                    categorySelect.value = '';
                    document.getElementById('subCategorySelect').innerHTML = '<option value="">請選擇細分類</option>';
                });
            });

            // 大分類變更事件
            categorySelect.addEventListener('change', function() {
                const type = document.querySelector('input[name="Record.Type"]:checked').value;
                loadSubCategories(this.value, type);
                
                // 更新新增子分類按鈕狀態
                const addSubCategoryBtn = document.getElementById('addSubCategoryBtn');
                addSubCategoryBtn.disabled = !this.value;
            });

            // 金額輸入格式化
            const amountInput = document.querySelector('.money-input');
            amountInput.addEventListener('input', function() {
                updateAmountDisplay();
                validateAmount();
            });

            // 備註字數統計
            const noteTextarea = document.querySelector('textarea[name="Record.Note"]');
            noteTextarea.addEventListener('input', updateNoteCount);

            // 表單提交驗證
            document.getElementById('recordForm').addEventListener('submit', function(e) {
                if (!validateForm()) {
                    e.preventDefault();
                }
            });
        });

        // 更新分類選項
        async function updateCategoryOptions(forceReload = false) {
            const type = document.querySelector('input[name="Record.Type"]:checked')?.value;
            const categorySelect = document.getElementById('categorySelect');
            const currentSelectedValue = categorySelect.value; // 保存當前選中值
            
            try {
                let options;
                
                if (forceReload) {
                    // 從服務器重新取得分類資料
                    const response = await fetch(`/index8?handler=Categories&type=${encodeURIComponent(type)}`);
                    if (response.ok) {
                        const categories = await response.json();
                        options = categories.map(c => ({ value: c.name, text: c.name }));
                    } else {
                        // 如果請求失敗，使用現有資料
                        options = type === 'Income' ? @Html.Raw(Json.Serialize(Model.IncomeCategoryOptions)) : @Html.Raw(Json.Serialize(Model.ExpenseCategoryOptions));
                    }
                } else {
                    // 使用頁面載入時的資料
                    options = type === 'Income' ? @Html.Raw(Json.Serialize(Model.IncomeCategoryOptions)) : @Html.Raw(Json.Serialize(Model.ExpenseCategoryOptions));
                }
                
                // 清空現有選項
                categorySelect.innerHTML = '<option value="">請選擇大分類</option>';
                
                options.forEach(option => {
                    const optionElement = document.createElement('option');
                    optionElement.value = option.value;
                    optionElement.textContent = option.text;
                    
                    // 如果是編輯模式且匹配當前記錄的分類，設為選中
                    if ('@Model.Record.Category' === option.value || currentSelectedValue === option.value) {
                        optionElement.selected = true;
                    }
                    
                    categorySelect.appendChild(optionElement);
                });
                
                // 更新新增子分類按鈕狀態
                const addSubCategoryBtn = document.getElementById('addSubCategoryBtn');
                if (addSubCategoryBtn) {
                    addSubCategoryBtn.disabled = !categorySelect.value;
                }
            } catch (error) {
                console.error('更新分類選項時發生錯誤:', error);
                // 發生錯誤時使用原有邏輯
                const options = type === 'Income' ? @Html.Raw(Json.Serialize(Model.IncomeCategoryOptions)) : @Html.Raw(Json.Serialize(Model.ExpenseCategoryOptions));
                
                categorySelect.innerHTML = '<option value="">請選擇大分類</option>';
                
                options.forEach(option => {
                    const optionElement = document.createElement('option');
                    optionElement.value = option.value;
                    optionElement.textContent = option.text;
                    
                    if ('@Model.Record.Category' === option.value || currentSelectedValue === option.value) {
                        optionElement.selected = true;
                    }
                    
                    categorySelect.appendChild(optionElement);
                });
            }
        }

        // 載入子分類
        async function loadSubCategories(category, type) {
            const subCategorySelect = document.getElementById('subCategorySelect');
            
            if (!category) {
                subCategorySelect.innerHTML = '<option value="">請選擇細分類</option>';
                return;
            }

            // 顯示載入中狀態
            subCategorySelect.innerHTML = '<option value="">載入中...</option>';
            subCategorySelect.disabled = true;

            try {
                const response = await fetch(`/index8?handler=SubCategories&category=${encodeURIComponent(category)}&type=${encodeURIComponent(type)}`);
                const subCategories = await response.json();
                
                subCategorySelect.innerHTML = '<option value="">請選擇細分類</option>';
                
                subCategories.forEach(sub => {
                    const option = document.createElement('option');
                    option.value = sub.value;
                    option.textContent = sub.text;
                    
                    // 如果是編輯模式且匹配當前記錄的子分類，設為選中
                    if ('@Model.Record.SubCategory' === sub.value) {
                        option.selected = true;
                    }
                    
                    subCategorySelect.appendChild(option);
                });
                
                // 重新啟用選單
                subCategorySelect.disabled = false;
                
                // 觸發一次focus來確保z-index正確應用
                setTimeout(() => {
                    if (document.activeElement === subCategorySelect) {
                        subCategorySelect.blur();
                        subCategorySelect.focus();
                    }
                }, 100);
                
            } catch (error) {
                console.error('載入子分類時發生錯誤:', error);
                subCategorySelect.innerHTML = '<option value="">載入失敗</option>';
                subCategorySelect.disabled = false;
            }
        }

        // 更新金額顯示
        function updateAmountDisplay() {
            const amountInput = document.querySelector('.money-input');
            const value = amountInput.value;
            
            if (value && !isNaN(value) && value !== '') {
                // 移除非數字字元
                const numericValue = parseInt(value.replace(/[^\d]/g, ''));
                if (!isNaN(numericValue)) {
                    amountInput.value = numericValue;
                }
            }
        }

        // 驗證金額
        async function validateAmount() {
            const amountInput = document.querySelector('.money-input');
            const amount = parseFloat(amountInput.value);
            
            if (!amount || amount <= 0) {
                return;
            }

            try {
                const response = await fetch('/index8?handler=ValidateAmount', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ amount: amount })
                });
                
                const result = await response.json();
                
                // 清除先前的驗證訊息
                const existingMessage = amountInput.parentElement.parentElement.querySelector('.amount-validation-message');
                if (existingMessage) {
                    existingMessage.remove();
                }
                
                if (!result.valid) {
                    const messageDiv = document.createElement('div');
                    messageDiv.className = 'text-danger amount-validation-message';
                    messageDiv.textContent = result.message;
                    amountInput.parentElement.parentElement.appendChild(messageDiv);
                }
            } catch (error) {
                console.error('驗證金額時發生錯誤:', error);
            }
        }

        // 更新備註字數
        function updateNoteCount() {
            const noteTextarea = document.querySelector('textarea[name="Record.Note"]');
            const noteCount = document.getElementById('noteCount');
            const currentLength = noteTextarea.value.length;
            noteCount.textContent = currentLength;
            
            if (currentLength > 500) {
                noteCount.className = 'text-danger';
                noteTextarea.value = noteTextarea.value.substring(0, 500);
                noteCount.textContent = '500';
            } else if (currentLength > 400) {
                noteCount.className = 'text-warning';
            } else {
                noteCount.className = 'text-muted';
            }
        }

        // 表單驗證
        function validateForm() {
            let isValid = true;
            const form = document.getElementById('recordForm');
            
            // 清除先前的驗證樣式
            form.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
            
            // 驗證日期
            const dateInput = document.querySelector('input[name="Record.Date"]');
            if (!dateInput.value) {
                dateInput.classList.add('is-invalid');
                isValid = false;
            } else {
                const selectedDate = new Date(dateInput.value);
                const today = new Date();
                today.setHours(23, 59, 59, 999); // 設為當天的最後一刻
                
                if (selectedDate > today) {
                    dateInput.classList.add('is-invalid');
                    alert('記錄日期不可為未來日期');
                    isValid = false;
                }
            }
            
            // 驗證收支類型
            const typeChecked = document.querySelector('input[name="Record.Type"]:checked');
            if (!typeChecked) {
                alert('請選擇收支類型');
                isValid = false;
            }
            
            // 驗證金額
            const amountInput = document.querySelector('.money-input');
            const amount = parseFloat(amountInput.value);
            if (!amount || amount <= 0) {
                amountInput.classList.add('is-invalid');
                alert('請輸入有效的金額');
                isValid = false;
            }
            
            // 驗證大分類
            const categorySelect = document.getElementById('categorySelect');
            if (!categorySelect.value) {
                categorySelect.classList.add('is-invalid');
                alert('請選擇大分類');
                isValid = false;
            }
            
            return isValid;
        }

        // 確認刪除
        function confirmDelete() {
            const modal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
            modal.show();
        }

        // 顯示新增大分類對話框
        function showAddCategoryModal() {
            // 清空表單
            document.getElementById('newCategoryName').value = '';
            document.getElementById('newCategoryIcon').value = 'fas fa-folder';
            document.getElementById('addCategoryMessage').classList.add('d-none');
            
            const modal = new bootstrap.Modal(document.getElementById('addCategoryModal'));
            modal.show();
        }

        // 顯示新增子分類對話框
        function showAddSubCategoryModal() {
            const categorySelect = document.getElementById('categorySelect');
            if (!categorySelect.value) {
                alert('請先選擇大分類');
                return;
            }

            // 設定所屬大分類
            document.getElementById('selectedCategoryName').value = categorySelect.options[categorySelect.selectedIndex].text;
            
            // 清空表單
            document.getElementById('newSubCategoryName').value = '';
            document.getElementById('addSubCategoryMessage').classList.add('d-none');
            
            const modal = new bootstrap.Modal(document.getElementById('addSubCategoryModal'));
            modal.show();
        }

        // 建立新大分類
        async function createCategory() {
            const nameInput = document.getElementById('newCategoryName');
            const iconSelect = document.getElementById('newCategoryIcon');
            const messageDiv = document.getElementById('addCategoryMessage');
            
            const categoryName = nameInput.value.trim();
            if (!categoryName) {
                showMessage(messageDiv, '請輸入分類名稱', 'danger');
                return;
            }

            const currentType = document.querySelector('input[name="Record.Type"]:checked').value;

            try {
                // 顯示載入狀態
                const createBtn = event.target;
                const originalText = createBtn.innerHTML;
                createBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 建立中...';
                createBtn.disabled = true;

                const response = await fetch('/index8?handler=CreateCategory', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({
                        name: categoryName,
                        type: currentType,
                        icon: iconSelect.value
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showMessage(messageDiv, result.message, 'success');
                    
                    // 重新載入分類選項
                    await updateCategoryOptions(true);
                    
                    // 設定新分類為選中
                    setTimeout(() => {
                        const categorySelect = document.getElementById('categorySelect');
                        categorySelect.value = categoryName;
                        
                        // 更新新增子分類按鈕狀態
                        const addSubCategoryBtn = document.getElementById('addSubCategoryBtn');
                        addSubCategoryBtn.disabled = false;
                        
                        // 關閉對話框
                        const modal = bootstrap.Modal.getInstance(document.getElementById('addCategoryModal'));
                        modal.hide();
                    }, 1000);
                } else {
                    showMessage(messageDiv, result.message, 'danger');
                }
                
                // 恢復按鈕狀態
                createBtn.innerHTML = originalText;
                createBtn.disabled = false;
                
            } catch (error) {
                console.error('建立分類時發生錯誤:', error);
                showMessage(messageDiv, '建立分類時發生錯誤', 'danger');
                
                // 恢復按鈕狀態
                createBtn.innerHTML = originalText;
                createBtn.disabled = false;
            }
        }

        // 建立新子分類
        async function createSubCategory() {
            const nameInput = document.getElementById('newSubCategoryName');
            const messageDiv = document.getElementById('addSubCategoryMessage');
            const categorySelect = document.getElementById('categorySelect');
            
            const subCategoryName = nameInput.value.trim();
            if (!subCategoryName) {
                showMessage(messageDiv, '請輸入子分類名稱', 'danger');
                return;
            }

            const currentType = document.querySelector('input[name="Record.Type"]:checked').value;
            const categoryName = categorySelect.value;

            try {
                // 顯示載入狀態
                const createBtn = event.target;
                const originalText = createBtn.innerHTML;
                createBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 建立中...';
                createBtn.disabled = true;

                const response = await fetch('/index8?handler=CreateSubCategory', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({
                        categoryName: categoryName,
                        subCategoryName: subCategoryName,
                        type: currentType
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showMessage(messageDiv, result.message, 'success');
                    
                    // 重新載入子分類
                    await loadSubCategories(categoryName, currentType);
                    
                    // 設定新子分類為選中
                    setTimeout(() => {
                        const subCategorySelect = document.getElementById('subCategorySelect');
                        subCategorySelect.value = subCategoryName;
                        
                        // 關閉對話框
                        const modal = bootstrap.Modal.getInstance(document.getElementById('addSubCategoryModal'));
                        modal.hide();
                    }, 1000);
                } else {
                    showMessage(messageDiv, result.message, 'danger');
                }
                
                // 恢復按鈕狀態
                createBtn.innerHTML = originalText;
                createBtn.disabled = false;
                
            } catch (error) {
                console.error('建立子分類時發生錯誤:', error);
                showMessage(messageDiv, '建立子分類時發生錯誤', 'danger');
                
                // 恢復按鈕狀態
                createBtn.innerHTML = originalText;
                createBtn.disabled = false;
            }
        }

        // 顯示訊息
        function showMessage(messageDiv, message, type) {
            messageDiv.className = `alert alert-${type}`;
            messageDiv.textContent = message;
            messageDiv.classList.remove('d-none');
        }

        // === Phase 2 UX 增強功能 ===

        /**
         * Phase 2 使用者體驗增強類
         */
        class VoiceInputUXEnhancer {
            constructor(voiceInputInstance) {
                this.voiceInput = voiceInputInstance;
                this.parseState = 'NotStarted';
                this.currentParseResult = null;
                this.progressAnimation = null;
            }

            /**
             * 處理解析結果並更新UI (Phase 2)
             */
            handleParseResult(response) {
                try {
                    this.currentParseResult = response.ParseResult;
                    this.parseState = response.ParseState;

                    // 顯示解析進度
                    this.showParseProgress(response);

                    // 根據解析狀態處理
                    switch (response.ParseState) {
                        case 'Completed':
                            this.handleCompleteSuccess(response);
                            break;
                        case 'PartialSuccess':
                            this.handlePartialSuccess(response);
                            break;
                        case 'RequiresInput':
                            this.handleRequiresInput(response);
                            break;
                        case 'Failed':
                            this.handleParseFailed(response);
                            break;
                        default:
                            this.showInfo('解析狀態未知，請檢查結果。');
                    }

                    // 顯示原有的解析結果預覽
                    if (response.ParseResult) {
                        displayParseResultLegacy(response.ParseResult);
                    }
                } catch (error) {
                    console.error('處理解析結果時發生錯誤:', error);
                    this.showError('處理解析結果時發生錯誤。');
                }
            }

            /**
             * 顯示解析進度
             */
            showParseProgress(response) {
                const progressDiv = document.getElementById('voiceParseProgress');
                const stateText = document.getElementById('parseStateText');
                
                // 顯示進度區域
                progressDiv.classList.remove('d-none');
                
                // 更新狀態文字
                const stateDisplayMap = {
                    'Completed': '完全解析完成',
                    'PartialSuccess': '部分解析成功',
                    'RequiresInput': '需要用戶輸入',
                    'Failed': '解析失敗',
                    'Parsing': '解析中'
                };
                
                stateText.textContent = stateDisplayMap[response.ParseState] || '未知狀態';
                stateText.className = `badge ${this.getStateColorClass(response.ParseState)}`;

                // 更新整體進度
                this.updateOverallProgress(response.ParseResult);
                
                // 更新欄位狀態
                this.updateFieldStatus(response.ParseResult);
            }

            /**
             * 更新整體進度
             */
            updateOverallProgress(parseResult) {
                const progressBar = document.getElementById('overallProgressBar');
                const progressText = document.getElementById('overallProgressText');
                
                const progress = Math.round(parseResult.ParseConfidence * 100);
                
                // 動畫效果
                if (this.progressAnimation) {
                    this.progressAnimation.cancel();
                }
                
                this.progressAnimation = progressBar.animate([
                    { width: '0%' },
                    { width: `${progress}%` }
                ], {
                    duration: 1000,
                    easing: 'ease-out',
                    fill: 'forwards'
                });
                
                progressBar.style.width = `${progress}%`;
                progressBar.setAttribute('aria-valuenow', progress);
                progressText.textContent = `${progress}%`;
                
                // 根據進度設定顏色
                progressBar.className = 'progress-bar progress-bar-striped';
                if (progress >= 80) {
                    progressBar.classList.add('bg-success');
                } else if (progress >= 60) {
                    progressBar.classList.add('bg-warning');
                } else {
                    progressBar.classList.add('bg-danger');
                }
            }

            /**
             * 更新欄位解析狀態
             */
            updateFieldStatus(parseResult) {
                const statusContainer = document.getElementById('fieldParseStatus');
                statusContainer.innerHTML = '';

                const fields = [
                    { key: 'Date', name: '日期', icon: 'fas fa-calendar' },
                    { key: 'Amount', name: '金額', icon: 'fas fa-dollar-sign' },
                    { key: 'Type', name: '類型', icon: 'fas fa-exchange-alt' },
                    { key: 'Category', name: '分類', icon: 'fas fa-tags' },
                    { key: 'PaymentMethod', name: '付款方式', icon: 'fas fa-credit-card' },
                    { key: 'Description', name: '描述', icon: 'fas fa-comment' }
                ];

                fields.forEach(field => {
                    const confidence = parseResult.FieldConfidence?.[field.key] || 0;
                    const status = this.getFieldStatus(confidence);
                    
                    const fieldElement = document.createElement('div');
                    fieldElement.className = 'col-6 col-sm-4 col-md-2';
                    fieldElement.innerHTML = `
                        <div class="text-center p-2 border rounded">
                            <i class="${field.icon} ${status.colorClass} mb-1"></i>
                            <div class="small fw-bold">${field.name}</div>
                            <div class="badge ${status.badgeClass}">${Math.round(confidence * 100)}%</div>
                        </div>
                    `;
                    
                    statusContainer.appendChild(fieldElement);
                });
            }

            /**
             * 處理完全成功的情況
             */
            handleCompleteSuccess(response) {
                // 隱藏缺失欄位提示
                document.getElementById('missingFieldsAlert').classList.add('d-none');
                
                // 顯示成功訊息
                this.showSuccess('語音解析完成！所有主要資訊都已成功識別。');
                
                // 自動套用到表單（延遲2秒）
                setTimeout(() => {
                    if (this.voiceInput && this.voiceInput.applyParseResultToForm) {
                        this.voiceInput.applyParseResultToForm(response.ParseResult);
                    }
                }, 2000);
            }

            /**
             * 處理部分成功的情況
             */
            handlePartialSuccess(response) {
                // 顯示缺失欄位提示
                this.showMissingFieldsAlert(response.MissingFieldHints, response.NextStepSuggestion);
                
                // 顯示部分成功訊息
                this.showWarning(`部分解析成功。${response.NextStepSuggestion}`);
            }

            /**
             * 處理需要輸入的情況
             */
            handleRequiresInput(response) {
                // 顯示缺失欄位提示
                this.showMissingFieldsAlert(response.MissingFieldHints, response.NextStepSuggestion);
                
                // 顯示需要輸入訊息
                this.showInfo(`需要更多資訊。${response.NextStepSuggestion}`);
            }

            /**
             * 處理解析失敗的情況
             */
            handleParseFailed(response) {
                // 隱藏進度區域
                document.getElementById('voiceParseProgress').classList.add('d-none');
                
                // 顯示失敗訊息
                this.showError(response.ErrorMessage || '語音解析失敗，請重新嘗試或手動填入。');
                
                // 提供重新錄音選項
                this.showRetryOptions();
            }

            /**
             * 顯示缺失欄位提示
             */
            showMissingFieldsAlert(hints, suggestion) {
                const alertDiv = document.getElementById('missingFieldsAlert');
                const hintsList = document.getElementById('missingFieldsList');
                const suggestionText = document.getElementById('nextStepSuggestion');
                
                suggestionText.textContent = suggestion || '請補充以下缺失的欄位：';
                hintsList.innerHTML = '';
                
                hints.forEach(hint => {
                    const hintElement = document.createElement('div');
                    hintElement.className = 'mb-2 p-2 border rounded';
                    hintElement.innerHTML = `
                        <div class="d-flex align-items-center">
                            <i class="${hint.Icon} ${this.getPriorityColor(hint.Priority)} me-2"></i>
                            <div class="flex-grow-1">
                                <strong>${hint.DisplayName}</strong>
                                <small class="text-muted d-block">${hint.Suggestion}</small>
                            </div>
                            <span class="badge ${this.getPriorityColor(hint.Priority)}">${hint.Priority === 3 ? '高' : hint.Priority === 2 ? '中' : '低'}</span>
                        </div>
                    `;
                    hintsList.appendChild(hintElement);
                });
                
                alertDiv.classList.remove('d-none');
                
                // 綁定按鈕事件
                this.bindMissingFieldButtons();
            }

            /**
             * 綁定缺失欄位按鈕事件
             */
            bindMissingFieldButtons() {
                // 智能填補按鈕
                const quickFillBtn = document.getElementById('quickFillBtn');
                if (quickFillBtn) {
                    quickFillBtn.onclick = () => this.performQuickFill();
                }
                
                // 繼續使用部分結果按鈕
                const continueBtn = document.getElementById('continueWithPartialBtn');
                if (continueBtn) {
                    continueBtn.onclick = () => this.continueWithPartialResult();
                }
            }

            /**
             * 執行智能填補
             */
            performQuickFill() {
                try {
                    // 實作智能填補邏輯
                    // 根據已解析的資訊智能推測缺失的欄位
                    
                    // 如果有商家但沒有分類，根據商家推測分類
                    if (this.currentParseResult.MerchantName && !this.currentParseResult.Category) {
                        // 商家分類對應邏輯
                        const merchantCategoryMap = {
                            '星巴克': '餐飲美食',
                            '麥當勞': '餐飲美食',
                            '7-Eleven': '餐飲美食',
                            '全家': '餐飲美食',
                            '全聯': '日用品'
                        };
                        
                        const suggestedCategory = merchantCategoryMap[this.currentParseResult.MerchantName];
                        if (suggestedCategory) {
                            this.currentParseResult.Category = suggestedCategory;
                        }
                    }
                    
                    // 如果沒有日期，預設為今天
                    if (!this.currentParseResult.Date) {
                        this.currentParseResult.Date = new Date().toISOString().split('T')[0];
                    }
                    
                    // 如果沒有付款方式，預設為現金
                    if (!this.currentParseResult.PaymentMethod) {
                        this.currentParseResult.PaymentMethod = '現金';
                    }
                    
                    this.showSuccess('已智能填補部分欄位！');
                    
                    // 重新顯示結果
                    displayParseResultLegacy(this.currentParseResult);
                } catch (error) {
                    console.error('智能填補時發生錯誤:', error);
                    this.showError('智能填補失敗。');
                }
            }

            /**
             * 繼續使用部分結果
             */
            continueWithPartialResult() {
                try {
                    if (this.voiceInput && this.voiceInput.applyParseResultToForm) {
                        this.voiceInput.applyParseResultToForm(this.currentParseResult);
                        this.showInfo('已套用部分解析結果，請手動補充剩餘欄位。');
                    }
                } catch (error) {
                    console.error('套用部分結果時發生錯誤:', error);
                    this.showError('套用部分結果失敗。');
                }
            }

            // === 輔助方法 ===

            getStateColorClass(state) {
                switch (state) {
                    case 'Completed': return 'bg-success text-white';
                    case 'PartialSuccess': return 'bg-warning text-dark';
                    case 'RequiresInput': return 'bg-info text-white';
                    case 'Failed': return 'bg-danger text-white';
                    default: return 'bg-secondary text-white';
                }
            }

            getFieldStatus(confidence) {
                if (confidence >= 0.8) {
                    return { colorClass: 'text-success', badgeClass: 'bg-success' };
                } else if (confidence >= 0.6) {
                    return { colorClass: 'text-warning', badgeClass: 'bg-warning' };
                } else if (confidence > 0) {
                    return { colorClass: 'text-danger', badgeClass: 'bg-danger' };
                } else {
                    return { colorClass: 'text-muted', badgeClass: 'bg-secondary' };
                }
            }

            getPriorityColor(priority) {
                switch (priority) {
                    case 3: return 'text-danger';
                    case 2: return 'text-warning';
                    case 1: return 'text-info';
                    default: return 'text-muted';
                }
            }

            showSuccess(message) {
                this.showToast(message, 'success');
            }

            showWarning(message) {
                this.showToast(message, 'warning');
            }

            showInfo(message) {
                this.showToast(message, 'info');
            }

            showError(message) {
                this.showToast(message, 'error');
            }

            showToast(message, type) {
                // 創建臨時通知
                const toast = document.createElement('div');
                toast.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show position-fixed`;
                toast.style.cssText = 'top: 20px; right: 20px; z-index: 1060; max-width: 400px;';
                toast.innerHTML = `
                    ${message}
                    <button type="button" class="btn-close" onclick="this.parentElement.remove()"></button>
                `;
                
                document.body.appendChild(toast);
                
                // 自動移除
                setTimeout(() => {
                    if (toast.parentElement) {
                        toast.remove();
                    }
                }, 5000);
            }

            showRetryOptions() {
                // 顯示重新錄音按鈕或其他恢復選項
                this.showInfo('您可以重新錄音或手動填入資訊。');
            }
        }

        // 全域變數：UX 增強器實例
        let voiceUXEnhancer = null;

        /**
         * 顯示 Phase 1 增強版解析結果 (重新命名以避免衝突)
         */
        function displayParseResultLegacy(parseResult) {
            const previewDiv = document.getElementById('parsedPreview');
            
            if (!parseResult || !parseResult.IsSuccess) {
                previewDiv.classList.add('d-none');
                return;
            }

            // 更新整體信心度
            updateOverallConfidence(parseResult.ParseConfidence);

            // 更新各欄位解析結果
            updateFieldResult('Date', parseResult.Date ? formatDate(parseResult.Date) : null, parseResult.FieldConfidence?.Date || 0);
            updateFieldResult('Type', parseResult.Type === 'Income' ? '收入' : '支出', parseResult.FieldConfidence?.Type || 0);
            updateFieldResult('Amount', parseResult.Amount ? `NT$ ${parseResult.Amount}` : null, parseResult.FieldConfidence?.Amount || 0);
            updateFieldResult('PaymentMethod', parseResult.PaymentMethod, parseResult.FieldConfidence?.PaymentMethod || 0);
            updateFieldResult('Category', parseResult.Category, parseResult.FieldConfidence?.Category || 0);
            updateFieldResult('SubCategory', parseResult.SubCategory, parseResult.FieldConfidence?.SubCategory || 0);
            updateFieldResult('Description', parseResult.Description, parseResult.FieldConfidence?.Description || 0);
            updateFieldResult('Merchant', parseResult.MerchantName, parseResult.FieldConfidence?.MerchantName || 0);
            updateFieldResult('Note', parseResult.Note, parseResult.FieldConfidence?.Note || 0);

            // 處理未解析內容
            showUnparsedContent(parseResult.UnparsedContent);

            // 顯示預覽區域
            previewDiv.classList.remove('d-none');

            // 綁定按鈕事件
            bindPreviewButtons(parseResult);
        }

        /**
         * Phase 2 版本的解析結果顯示函式
         */
        function displayParseResult(response) {
            // 如果回應是 Phase 2 格式（有 ParseState），使用新的 UX 增強器
            if (response && response.ParseState !== undefined) {
                if (!voiceUXEnhancer) {
                    voiceUXEnhancer = new VoiceInputUXEnhancer(voiceInput);
                }
                voiceUXEnhancer.handleParseResult(response);
            } else {
                // 如果是舊格式，使用原有的顯示方式
                displayParseResultLegacy(response);
            }
        }

        /**
         * 切換信心度詳細檢視
         */
        function toggleConfidenceDetails() {
            const detailsDiv = document.getElementById('confidenceDetails');
            const isVisible = !detailsDiv.classList.contains('d-none');
            
            if (isVisible) {
                detailsDiv.classList.add('d-none');
            } else {
                detailsDiv.classList.remove('d-none');
                
                // 如果有當前解析結果，顯示詳細信心度分析
                if (voiceUXEnhancer && voiceUXEnhancer.currentParseResult) {
                    showDetailedConfidenceAnalysis(voiceUXEnhancer.currentParseResult);
                }
            }
        }

        /**
         * 顯示詳細信心度分析
         */
        function showDetailedConfidenceAnalysis(parseResult) {
            const listContainer = document.getElementById('confidenceDetailsList');
            listContainer.innerHTML = '';

            const fields = [
                { key: 'Date', name: '日期解析', description: '基於時間關鍵字和格式匹配' },
                { key: 'Amount', name: '金額解析', description: '基於數字識別和金額關鍵字' },
                { key: 'Type', name: '收支類型', description: '基於動詞和意圖分析' },
                { key: 'Category', name: '分類匹配', description: '基於關鍵字和商家對應' },
                { key: 'PaymentMethod', name: '付款方式', description: '基於支付相關關鍵字' },
                { key: 'Description', name: '描述提取', description: '基於語意分析和內容過濾' }
            ];

            fields.forEach(field => {
                const confidence = parseResult.FieldConfidence?.[field.key] || 0;
                const percentage = Math.round(confidence * 100);
                
                const fieldElement = document.createElement('div');
                fieldElement.className = 'col-md-6 mb-3';
                fieldElement.innerHTML = `
                    <div class="card h-100">
                        <div class="card-body">
                            <h6 class="card-title">${field.name}</h6>
                            <div class="progress mb-2">
                                <div class="progress-bar ${confidence >= 0.8 ? 'bg-success' : confidence >= 0.6 ? 'bg-warning' : 'bg-danger'}" 
                                     style="width: ${percentage}%" 
                                     aria-valuenow="${percentage}" 
                                     aria-valuemin="0" 
                                     aria-valuemax="100">
                                    ${percentage}%
                                </div>
                            </div>
                            <small class="text-muted">${field.description}</small>
                        </div>
                    </div>
                `;
                listContainer.appendChild(fieldElement);
            });
        }
        function updateOverallConfidence(confidence) {
            const percentage = Math.round(confidence * 100);
            const progressBar = document.getElementById('overallConfidenceBar');
            const progressText = document.getElementById('overallConfidenceText');
            
            progressBar.style.width = `${percentage}%`;
            progressBar.setAttribute('aria-valuenow', percentage);
            progressText.textContent = `${percentage}%`;
            
            // 根據信心度設定顏色
            progressBar.className = 'progress-bar';
            if (percentage >= 80) {
                progressBar.classList.add('bg-success');
            } else if (percentage >= 60) {
                progressBar.classList.add('bg-warning');
            } else {
                progressBar.classList.add('bg-danger');
            }
        }

        /**
         * 更新單一欄位結果顯示
         */
        function updateFieldResult(fieldName, value, confidence) {
            const valueElement = document.getElementById(`preview${fieldName}Value`);
            const confidenceElement = document.getElementById(`preview${fieldName}Confidence`);
            const statusElement = document.getElementById(`preview${fieldName}Status`);
            
            if (value) {
                valueElement.textContent = value;
                
                const percentage = Math.round(confidence * 100);
                confidenceElement.textContent = `${percentage}%`;
                confidenceElement.className = 'badge';
                
                if (percentage >= 70) {
                    confidenceElement.classList.add('bg-success');
                    statusElement.textContent = '已解析';
                    statusElement.className = 'badge bg-success';
                } else if (percentage >= 40) {
                    confidenceElement.classList.add('bg-warning');
                    statusElement.textContent = '低信心度';
                    statusElement.className = 'badge bg-warning';
                } else {
                    confidenceElement.classList.add('bg-danger');
                    statusElement.textContent = '不確定';
                    statusElement.className = 'badge bg-danger';
                }
            } else {
                valueElement.textContent = '-';
                confidenceElement.textContent = '-';
                confidenceElement.className = 'badge bg-secondary';
                statusElement.textContent = '未解析';
                statusElement.className = 'badge bg-secondary';
            }
        }

        /**
         * 顯示未解析內容
         */
        function showUnparsedContent(unparsedContent) {
            const section = document.getElementById('unparsedContentSection');
            const textElement = document.getElementById('unparsedContentText');
            
            if (unparsedContent && unparsedContent.trim()) {
                textElement.textContent = unparsedContent;
                section.classList.remove('d-none');
            } else {
                section.classList.add('d-none');
            }
        }

        /**
         * 綁定預覽按鈕事件
         */
        function bindPreviewButtons(parseResult) {
            // 套用按鈕
            const applyBtn = document.getElementById('applyParseResult');
            applyBtn.onclick = function() {
                applyParseResultToForm(parseResult);
            };

            // 忽略按鈕
            const rejectBtn = document.getElementById('rejectParseResult');
            rejectBtn.onclick = function() {
                document.getElementById('parsedPreview').classList.add('d-none');
            };
        }

        /**
         * 套用解析結果到表單
         */
        function applyParseResultToForm(parseResult) {
            try {
                // 日期
                if (parseResult.Date) {
                    const dateInput = document.querySelector('input[name="Record.Date"]');
                    if (dateInput) {
                        dateInput.value = formatDateForInput(parseResult.Date);
                    }
                }

                // 收支類型
                if (parseResult.Type) {
                    const typeRadio = document.querySelector(`input[name="Record.Type"][value="${parseResult.Type}"]`);
                    if (typeRadio) {
                        typeRadio.checked = true;
                        // 觸發事件以更新分類選項
                        typeRadio.dispatchEvent(new Event('change'));
                    }
                }

                // 金額
                if (parseResult.Amount) {
                    const amountInput = document.querySelector('input[asp-for="Record.Amount"]') || 
                                       document.querySelector('.money-input') ||
                                       document.querySelector('input[type="number"]');
                    if (amountInput) {
                        amountInput.value = parseResult.Amount;
                        updateAmountDisplay();
                    }
                }

                // 付款方式
                if (parseResult.PaymentMethod) {
                    const paymentSelect = document.querySelector('select[name="Record.PaymentMethod"]');
                    if (paymentSelect) {
                        // 嘗試找到匹配的選項
                        for (let option of paymentSelect.options) {
                            if (option.text.includes(parseResult.PaymentMethod) || option.value === parseResult.PaymentMethod) {
                                paymentSelect.value = option.value;
                                break;
                            }
                        }
                    }
                }

                // 大分類
                if (parseResult.Category) {
                    setTimeout(() => {
                        const categorySelect = document.getElementById('categorySelect');
                        if (categorySelect) {
                            categorySelect.value = parseResult.Category;
                            categorySelect.dispatchEvent(new Event('change'));
                            
                            // 細分類 (需要等大分類載入完成)
                            if (parseResult.SubCategory) {
                                setTimeout(() => {
                                    const subCategorySelect = document.getElementById('subCategorySelect');
                                    if (subCategorySelect) {
                                        subCategorySelect.value = parseResult.SubCategory;
                                    }
                                }, 500);
                            }
                        }
                    }, 200);
                }

                // 交易描述
                if (parseResult.Description) {
                    const descInput = document.querySelector('input[name="description"]');
                    if (descInput) {
                        descInput.value = parseResult.Description;
                    }
                }

                // 商家名稱
                if (parseResult.MerchantName) {
                    const merchantInput = document.querySelector('input[name="merchant"]');
                    if (merchantInput) {
                        merchantInput.value = parseResult.MerchantName;
                    }
                }

                // 備註
                if (parseResult.Note) {
                    const noteTextarea = document.querySelector('textarea[name="Record.Note"]');
                    if (noteTextarea) {
                        const existingNote = noteTextarea.value.trim();
                        noteTextarea.value = existingNote ? `${existingNote}\n${parseResult.Note}` : parseResult.Note;
                        updateNoteCount();
                    }
                }

                // 隱藏預覽區域
                document.getElementById('parsedPreview').classList.add('d-none');
                
                // 顯示成功訊息
                showSuccessMessage('語音解析結果已套用到表單！請檢查並確認資訊是否正確。');

            } catch (error) {
                console.error('套用解析結果時發生錯誤:', error);
                showErrorMessage('套用解析結果時發生錯誤，請手動填入資訊');
            }
        }

        /**
         * 格式化日期顯示
         */
        function formatDate(dateString) {
            try {
                const date = new Date(dateString);
                return date.toLocaleDateString('zh-TW', {
                    year: 'numeric',
                    month: '2-digit',
                    day: '2-digit'
                });
            } catch (error) {
                return dateString;
            }
        }

        /**
         * 格式化日期為輸入欄位格式 (YYYY-MM-DD)
         */
        function formatDateForInput(dateString) {
            try {
                const date = new Date(dateString);
                return date.toISOString().split('T')[0];
            } catch (error) {
                return dateString;
            }
        }

        /**
         * 顯示成功訊息
         */
        function showSuccessMessage(message) {
            // 創建臨時通知
            const alert = document.createElement('div');
            alert.className = 'alert alert-success alert-dismissible fade show position-fixed';
            alert.style.top = '20px';
            alert.style.right = '20px';
            alert.style.zIndex = '9999';
            alert.innerHTML = `
                <i class="fas fa-check-circle me-2"></i>${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            document.body.appendChild(alert);
            
            // 3秒後自動移除
            setTimeout(() => {
                if (alert.parentNode) {
                    alert.parentNode.removeChild(alert);
                }
            }, 3000);
        }

        /**
         * 顯示錯誤訊息
         */
        function showErrorMessage(message) {
            // 創建臨時通知
            const alert = document.createElement('div');
            alert.className = 'alert alert-danger alert-dismissible fade show position-fixed';
            alert.style.top = '20px';
            alert.style.right = '20px';
            alert.style.zIndex = '9999';
            alert.innerHTML = `
                <i class="fas fa-exclamation-circle me-2"></i>${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            document.body.appendChild(alert);
            
            // 5秒後自動移除
            setTimeout(() => {
                if (alert.parentNode) {
                    alert.parentNode.removeChild(alert);
                }
            }, 5000);
        }
    </script>
    
    <!-- 表單驗證 -->
    <partial name="_ValidationScriptsPartial" />
}

<!-- 分類建議卡片樣板 -->
<script type="text/template" id="suggestionCardTemplate">
    <div class="suggestion-card" data-category-id="{{categoryId}}" data-confidence="{{confidence}}">
        <div class="suggestion-content">
            <div class="suggestion-icon">
                <i class="{{iconClass}}"></i>
            </div>
            <div class="suggestion-info">
                <div class="suggestion-name">{{categoryName}}</div>
                <div class="suggestion-reason">{{reason}}</div>
            </div>
            <div class="suggestion-confidence">
                <div class="confidence-bar">
                    <div class="confidence-fill" style="width: {{confidencePercent}}%"></div>
                </div>
                <small>{{confidencePercent}}%</small>
            </div>
        </div>
        <button type="button" class="btn btn-sm btn-primary apply-suggestion">
            採用
        </button>
    </div>
</script>

<!-- 引入智能分類樣式和腳本 -->
<link rel="stylesheet" href="~/css/smart-category.css" asp-append-version="true" />
<script src="~/js/smart-category.js" asp-append-version="true"></script>
