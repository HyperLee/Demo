@page
@model Demo.Pages.Index9Model
@{
    ViewData["Title"] = "財務儀表板";
}

<!-- 引入 Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js@4.0.1/dist/chart.umd.js"></script>

<div class="container-fluid">
    <!-- 頁面標題 -->
    <div class="row mb-4">
        <div class="col-12">
            <h2 class="mb-0">
                <i class="fas fa-tachometer-alt text-primary"></i>
                財務儀表板
            </h2>
            <small class="text-muted">快速掌握您的財務狀況</small>
        </div>
    </div>

    <!-- 時間範圍選擇器 -->
    <div class="dashboard-controls mb-4">
        <div class="card">
            <div class="card-body py-2">
                <div class="d-flex align-items-center">
                    <label class="me-3 mb-0">時間範圍：</label>
                    <div class="btn-group" role="group">
                        <input type="radio" class="btn-check" name="timeRange" id="thisMonth" value="thisMonth" @(Model.TimeRange == "thisMonth" ? "checked" : "")>
                        <label class="btn btn-outline-primary btn-sm" for="thisMonth">本月</label>
                        
                        <input type="radio" class="btn-check" name="timeRange" id="last3Months" value="last3Months" @(Model.TimeRange == "last3Months" ? "checked" : "")>
                        <label class="btn btn-outline-primary btn-sm" for="last3Months">近3個月</label>
                        
                        <input type="radio" class="btn-check" name="timeRange" id="last6Months" value="last6Months" @(Model.TimeRange == "last6Months" ? "checked" : "")>
                        <label class="btn btn-outline-primary btn-sm" for="last6Months">近6個月</label>
                        
                        <input type="radio" class="btn-check" name="timeRange" id="thisYear" value="thisYear" @(Model.TimeRange == "thisYear" ? "checked" : "")>
                        <label class="btn btn-outline-primary btn-sm" for="thisYear">今年</label>
                    </div>
                    
                    <button id="refreshBtn" class="btn btn-success btn-sm ms-3">
                        <i class="fas fa-sync-alt"></i> 重新整理
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- 載入指示器 -->
    <div class="d-none justify-content-center" id="loadingIndicator">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">載入中...</span>
        </div>
    </div>

    <!-- 統計卡片區域 -->
    <div class="row mb-4" id="statsCards">
        @foreach (var card in Model.Cards)
        {
            <div class="col-lg-3 col-md-6 mb-3">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="rounded-circle bg-@card.BackgroundColor bg-gradient p-3">
                                <i class="@card.IconClass text-white fa-2x"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <div class="row">
                                <div class="col">
                                    <p class="text-muted small mb-1">@card.Title</p>
                                    <h4 class="mb-0">@card.FormattedValue</h4>
                                    @if (!string.IsNullOrEmpty(card.Subtitle))
                                    {
                                        <small class="text-muted">@card.Subtitle</small>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- 圖表區域 -->
    <div class="row">
        <!-- 收支趨勢圖 -->
        <div class="col-lg-8 mb-4">
            <div class="card shadow-sm">
                <div class="card-header bg-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="fas fa-chart-line text-primary"></i>
                            收支趨勢分析
                        </h5>
                        <small class="text-muted">最近6個月</small>
                    </div>
                </div>
                <div class="card-body">
                    <canvas id="trendChart" style="height: 350px;"></canvas>
                </div>
            </div>
        </div>

        <!-- 支出分類圓餅圖 -->
        <div class="col-lg-4 mb-4">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-white">
                    <h5 class="mb-0">
                        <i class="fas fa-chart-pie text-primary"></i>
                        支出分類分布
                    </h5>
                </div>
                <div class="card-body d-flex align-items-center justify-content-center">
                    <canvas id="categoryChart" style="height: 300px;"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- 最近交易記錄 -->
    <div class="row">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header bg-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="fas fa-list text-primary"></i>
                            最近交易記錄
                        </h5>
                        <a href="/index7" class="btn btn-sm btn-outline-primary">
                            <i class="fas fa-external-link-alt"></i>
                            查看全部
                        </a>
                    </div>
                </div>
                <div class="card-body">
                    @if (Model.RecentTransactions.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>日期</th>
                                        <th>類型</th>
                                        <th>分類</th>
                                        <th>描述</th>
                                        <th class="text-end">金額</th>
                                    </tr>
                                </thead>
                                <tbody id="recentTransactionsBody">
                                    @foreach (var transaction in Model.RecentTransactions)
                                    {
                                        <tr>
                                            <td>
                                                <small class="text-muted">@transaction.Date.ToString("MM/dd")</small>
                                            </td>
                                            <td>
                                                <span class="badge bg-@(transaction.Amount > 0 ? "success" : "danger")">
                                                    @(transaction.Amount > 0 ? "收入" : "支出")
                                                </span>
                                            </td>
                                            <td>@transaction.Category</td>
                                            <td>@transaction.Note</td>
                                            <td class="text-end">
                                                <span class="@(transaction.Amount > 0 ? "text-success" : "text-danger")">
                                                    @(transaction.Amount > 0 ? "+" : "")@transaction.Amount.ToString("N0")
                                                </span>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5" id="emptyState">
                            <i class="fas fa-chart-line fa-3x text-muted mb-3"></i>
                            <h4>還沒有記帳數據</h4>
                            <p class="text-muted mb-3">開始記帳，建立您的財務分析！</p>
                            <a href="/index8" class="btn btn-primary">
                                <i class="fas fa-plus"></i>
                                新增第一筆記錄
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- JavaScript -->
<script>
    // 頁面載入後初始化
    document.addEventListener('DOMContentLoaded', function() {
        initializeDashboard();
    });

    // 儀表板初始化
    function initializeDashboard() {
        initializeTimeRangeControls();
        initializeCharts();
        initializeRefreshButton();
    }

    // 初始化時間範圍控制
    function initializeTimeRangeControls() {
        const timeRangeInputs = document.querySelectorAll('input[name="timeRange"]');
        timeRangeInputs.forEach(input => {
            input.addEventListener('change', function() {
                if (this.checked) {
                    updateDashboard(this.value);
                }
            });
        });
    }

    // 初始化重新整理按鈕
    function initializeRefreshButton() {
        const refreshBtn = document.getElementById('refreshBtn');
        refreshBtn.addEventListener('click', function() {
            const selectedRange = document.querySelector('input[name="timeRange"]:checked').value;
            updateDashboard(selectedRange);
        });
    }

    // 更新儀表板數據
    function updateDashboard(timeRange) {
        showLoadingIndicator();
        
        const formData = new FormData();
        formData.append('timeRange', timeRange);

        fetch('/index9?handler=UpdateData', {
            method: 'POST',
            body: formData,
            headers: {
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                updateStatCards(data.cards);
                updateCharts(data.stats);
                updateRecentTransactions(data.recentTransactions);
            } else {
                console.error('更新數據失敗:', data.message);
                alert('更新數據時發生錯誤，請重試');
            }
        })
        .catch(error => {
            console.error('AJAX 請求失敗:', error);
            alert('網路連線錯誤，請檢查網路設定');
        })
        .finally(() => {
            hideLoadingIndicator();
        });
    }

    // 顯示載入指示器
    function showLoadingIndicator() {
        document.getElementById('loadingIndicator').classList.remove('d-none');
        document.getElementById('loadingIndicator').classList.add('d-flex');
    }

    // 隱藏載入指示器
    function hideLoadingIndicator() {
        document.getElementById('loadingIndicator').classList.add('d-none');
        document.getElementById('loadingIndicator').classList.remove('d-flex');
    }

    // 更新統計卡片
    function updateStatCards(cards) {
        // TODO: 實作統計卡片更新邏輯
        console.log('更新統計卡片:', cards);
    }

    // 更新最近交易記錄
    function updateRecentTransactions(transactions) {
        const tbody = document.getElementById('recentTransactionsBody');
        if (!tbody) return;

        if (transactions.length === 0) {
            tbody.innerHTML = '<tr><td colspan="5" class="text-center text-muted">暫無交易記錄</td></tr>';
            return;
        }

        let html = '';
        transactions.forEach(transaction => {
            const isIncome = transaction.amount > 0;
            const badgeClass = isIncome ? 'success' : 'danger';
            const textClass = isIncome ? 'text-success' : 'text-danger';
            const amountPrefix = isIncome ? '+' : '';
            
            html += `
                <tr>
                    <td><small class="text-muted">${formatDate(transaction.date)}</small></td>
                    <td><span class="badge bg-${badgeClass}">${isIncome ? '收入' : '支出'}</span></td>
                    <td>${transaction.category}</td>
                    <td>${transaction.description}</td>
                    <td class="text-end">
                        <span class="${textClass}">${amountPrefix}${formatCurrency(transaction.amount)}</span>
                    </td>
                </tr>
            `;
        });
        
        tbody.innerHTML = html;
    }

    // 初始化圖表
    function initializeCharts() {
        initializeTrendChart();
        initializeCategoryChart();
    }

    // 初始化趨勢圖表
    function initializeTrendChart() {
        const ctx = document.getElementById('trendChart').getContext('2d');
        const trendData = @Html.Raw(Json.Serialize(Model.Stats?.TrendData ?? new List<Demo.Models.MonthlyTrend>()));
        
        const months = trendData.map(item => item.monthName);
        const incomeData = trendData.map(item => item.income);
        const expenseData = trendData.map(item => item.expense);

        window.trendChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: months,
                datasets: [
                    {
                        label: '收入',
                        data: incomeData,
                        borderColor: '#198754',
                        backgroundColor: 'rgba(25, 135, 84, 0.1)',
                        fill: true,
                        tension: 0.4
                    },
                    {
                        label: '支出',
                        data: expenseData,
                        borderColor: '#dc3545',
                        backgroundColor: 'rgba(220, 53, 69, 0.1)',
                        fill: true,
                        tension: 0.4
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: false
                    },
                    legend: {
                        position: 'top'
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return 'NT$ ' + value.toLocaleString();
                            }
                        }
                    }
                },
                interaction: {
                    intersect: false,
                    mode: 'index'
                }
            }
        });
    }

    // 初始化分類圓餅圖
    function initializeCategoryChart() {
        const ctx = document.getElementById('categoryChart').getContext('2d');
        const categoryData = @Html.Raw(Json.Serialize(Model.Stats?.CategoryData ?? new List<Demo.Models.CategorySummary>()));
        
        if (categoryData.length === 0) {
            ctx.font = '16px Arial';
            ctx.textAlign = 'center';
            ctx.fillStyle = '#6c757d';
            ctx.fillText('暫無支出數據', ctx.canvas.width / 2, ctx.canvas.height / 2);
            return;
        }

        const labels = categoryData.map(item => item.category);
        const data = categoryData.map(item => item.amount);
        const colors = categoryData.map(item => item.color);

        window.categoryChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: labels,
                datasets: [{
                    data: data,
                    backgroundColor: colors,
                    borderWidth: 2,
                    borderColor: '#ffffff'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom',
                        labels: {
                            padding: 20,
                            usePointStyle: true
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const percentage = ((context.parsed / data.reduce((a, b) => a + b, 0)) * 100).toFixed(1);
                                return `${context.label}: NT$ ${context.parsed.toLocaleString()} (${percentage}%)`;
                            }
                        }
                    }
                }
            }
        });
    }

    // 更新圖表
    function updateCharts(stats) {
        // 更新趨勢圖表
        if (window.trendChart) {
            const months = stats.trendData.map(item => item.monthName);
            const incomeData = stats.trendData.map(item => item.income);
            const expenseData = stats.trendData.map(item => item.expense);
            
            window.trendChart.data.labels = months;
            window.trendChart.data.datasets[0].data = incomeData;
            window.trendChart.data.datasets[1].data = expenseData;
            window.trendChart.update();
        }

        // 更新分類圖表
        if (window.categoryChart && stats.categoryData.length > 0) {
            const labels = stats.categoryData.map(item => item.category);
            const data = stats.categoryData.map(item => item.amount);
            const colors = stats.categoryData.map(item => item.color);
            
            window.categoryChart.data.labels = labels;
            window.categoryChart.data.datasets[0].data = data;
            window.categoryChart.data.datasets[0].backgroundColor = colors;
            window.categoryChart.update();
        }
    }

    // 工具函數
    function formatDate(dateString) {
        const date = new Date(dateString);
        return `${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getDate().toString().padStart(2, '0')}`;
    }

    function formatCurrency(amount) {
        return Math.abs(amount).toLocaleString();
    }
</script>
